#!/usr/bin/env bash

# ======================= jot-lsp =======================

# ----------------------- exports -----------------------

export JOT_LSP_BIN="jot-lsp"
export JOT_LSP_COMPLETIONS=$(head </usr/share/dict/words -n 1000 | jq --raw-input --slurp 'split("\n")[:-1] | map({label: . })')
export JOT_LSP_SERVERINFO='{
  "name": "jot-lsp",
  "version": "0.0.1"
}'
export JOT_LSP_CLIENTINFO='{
  "name": "jot-lsp",
  "version": "0.0.1"
}'
export JOT_LSP_CAPABILITIES='{
  "textDocumentSync": 1,
  "hoverProvider": true,
  "completionProvider": {
    "resolveProvider": true,
    "triggerCharacters": [".", "_", "*", "%", "<", "#", "[", "(",  "/", "-", "@", "#", ":", "|", "$", "&"]
  }
}'

# -----------------------   var   -----------------------

JOT_LSP_DEBUG=false
JOT_LSP_STDIO=false
JOT_LSP_PORT=2088
JOT_LSP_HOST=localhost

# ----------------------- methods -----------------------

# param 1: id
# param 2: result
function lsp-reply() {
  reply '{
    "jsonrpc": "2.0",
    "id": '"$1"',
    "result": '"$2"'
  }'
}

function reply() {
  local b="$1"
  local len=${#b}
  local r="Content-Length: $len\r\n\r\n$b"
  echo "$r" >>/tmp/out.log
  echo -e "$r"
}

# param 1: id
# param 2: method
function lsp-handle() {
  ID="$1"
  METHOD="$2"
  case $2 in
    'initialize') lsp-reply $ID '{
    "clientInfo": '"$JOT_LSP_CLIENTINFO"',
    "capabilities": '"$JOT_LSP_CAPABILITIES"'
  }' ;;
    'textDocument/moniker') lsp-reply "$ID" '[]' ;;
    'textDocument/codeLens') lsp-reply "$ID" '[]' ;;
    'textDocument/definition') lsp-reply "$ID" '[]' ;;
    'textDocument/documentHighlight') lsp-reply "$ID" '[]' ;;
    'textDocument/documentLink') lsp-reply "$ID" '[]' ;;
    'textDocument/publishDiagnostics') lsp-reply $ID '[]' ;;
    'textDocument/signatureHelp') lsp-reply $ID '{
    "signatures": [],
    "activeSignature": 0,
    "activeParameter": 0
  }' ;;
    'textDocument/completion') lsp-reply "$ID" '{
    "isIncomplete": false,
    "items": '"$JOT_LSP_COMPLETIONS"'
  }' ;;
    'textDocument/rename') lsp-reply "$ID" 'null' ;;
    'textDocument/formatting') lsp-reply "$ID" '[]' ;;
    'textDocument/rangeFormatting') lsp-reply "$ID" '[]' ;;
    'textDocument/onTypeFormatting') lsp-reply "$ID" '[]' ;;
    'textDocument/prepareRename') lsp-reply "$ID" 'null' ;;
    'textDocument/hover') lsp-reply "$ID" '{
    "contents": {
      "kind": "markdown",
      "value": "```python\nhello world\n```"
    }
  }' ;;
  esac

}
function lsp-format() {
  echo ""
}

function lsp-serve() {
  echo "Serving at " $JOT_LSP_PORT
  while IFS= read -r LN; do
    [[ "$LN" =~ ^Content-Length:\ ([0-9]+) ]]
    LEN="${BASH_REMATCH[1]}"
    LEN=$((len + 2))
    PAYLOAD=$(head -c "$LEN")
    ID=$(echo -E "$PAYLOAD" | jq --raw-output '.id')
    METHOD=$(echo -E "$PAYLOAD" | jq --raw-output '.method')
    log $ID $METHOD
    lsp-handle $ID $METHOD
  done

}

# =======================  format  =======================

# ----------------------- styling -----------------------

X="\x1b[0m" # RESET
B="\x1b[1m" # BOLD
D="\x1b[2m" # DIM
I="\x1b[3m" # ITALIC
U="\x1b[4m" # UNDERLINE
L="\x1b[5m" # BLINK
R="\x1b[7m" # REVERSE
H="\x1b[8m" # HIDDEN
F="\x1b[9m" # STRIKE

# ----------------------- colors -----------------------

FL="\x1b[30m" # FG BLACK
FR="\x1b[31m" # FG RED
FG="\x1b[32m" # FG GREEN
FY="\x1b[33m" # FG YELLOW
FB="\x1b[34m" # FG BLUE
FM="\x1b[35m" # FG MAGENTA
FM="\x1b[36m" # FG CYAN
FW="\x1b[37m" # FG WHITE

BL="\x1b[40m" # BG BLACK
BR="\x1b[41m" # BG RED
BG="\x1b[42m" # BG GREEN
BY="\x1b[43m" # BG YELLOW
BB="\x1b[44m" # BG BLUE
BM="\x1b[45m" # BG MAGENTA
BC="\x1b[46m" # BG CYAN
BW="\x1b[47m" # BG WHITE

# -----------------------  helpers  -----------------------

bold() {
  echo -e "$B$1$X"
}
italic() {
  echo -e "$I$1$X"
}
underline() {
  echo -e "$U$1$X"
}
strike() {
  echo -e "$F$1$X"
}
reverse() {
  echo -e "$R$1$X"
}
blink() {
  echo -e "$L$1$X"
}
dim() {
  echo -e "$D$1$X"
}
color() {
  echo -e "$2$1$X"
}
# 1: log
# 2: message
# 3: context
# 4: location
# 5: color
logs() {
  DIV="$FW$R$D$L $X"
  LOC=""
  CTX=""
  MSG=""
  LOG=""
  [[ -n "$1" ]] && LOG="$B$5$R $1 $X" || LOG=""
  [[ -n "$2" ]] && MSG="$FW$D$2$X" || MSG=""
  [[ -n "$3" ]] && CTX="$5$B$3$X" || CTX=""
  [[ -n "$4" ]] && LOC="$FL$B($4)$X" || LOC=""
  echo -e "$LOG $CTX $MSG $LOC"
}
LOC=""

# 1: context
# 2: message
# 3: location
info() {
  logs "󰍡  INF" $2 $1 "" "$FB"
}
log() {
  logs "󰗚  LOG" $2 $1 "" $FW
}
# 󰙅 󰍔 󱡠 󰆼  󰘧 󰷐
dbg() {
  logs "󰯂  DBG" $2 $1 "" $FM
}
hint() {
  logs "  HNT" $2 $1 "" $FG
}
warn() {
  logs "  WRN" $2 $1 "" $FY
}
err() {
  logs "󰟢  ERR" $2 $1 "" $FR
}
lsp() {
  logs "󰘧  LSP" $2 $1 "" $FM
}
jot() {
  logs "󰒓  JOT" $2 $1 "" $FB
}
trace() {
  logs "󰆧  TRC" $2 $1 "" $FM
}

# ======================= argparse =======================
# ----------------------- subcmds -----------------------

function show-help() {
  echo "Usage: $JOT_LSP_BIN [-h] [-v] [-f filename]"
  echo ""
  echo "COMMANDS"
  echo ""
  echo "  serve"
  echo "  run"
  echo ""
  echo "OPTIONS"
  echo ""
  echo "  --help    | -h         Show help"
  echo "  --version | -v         Show version"
  echo "  -c CONFIG-FILE         Specify a file"
  echo ""
}
function show-version() {
  jot "version" "0.0.1-alpha.1"
}
function shell() {
  lsp "shell" "sh"
}

function update() {
  jot "update" "..."
}

# ----------------------- main fn -----------------------
function main() {
  # if no subcommand, serve

  [[ $# -eq 0 ]] && lsp-serve

  case "$1" in
    serve | s | run | r) lsp-serve ;;
    shell | sh) shell ;;
    --config | -c) JOT_LSP_CONFIG=$2 ;;
    --stdio | -s) JOT_LSP_STDIO=true ;;
    --debug | -d) JOT_LSP_DEBUG=true ;;
    --port | -p) JOT_LSP_PORT=$2 ;;
    --host) JOT_LSP_HOST=$2 ;;
    help | h | -h | --help) show-help ;;
    format | f) lsp-format ;;
    version | v | --version | -v) show-version ;;
    update | up | u) update ;;
  esac
}

main "$@"

# echo "Running wordsh..."
# serve

# vim:ft=bash
